# -*- coding: utf-8 -*-
"""p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XB-F70QIDcik0u6E2sBKm3SSEa5DzgIW
"""

# nama file p2.py 
# Isikan email anda dan copy semua cell code yang dengan komentar #Graded

# untuk revisi dan resubmisi sebelum deadline
# silakan di resubmit dengan nilai variable priority yang lebih besar dari
# nilai priority submisi sebelumnya
# JIKA TIDAK ADA VARIABLE priority DIANGGAP priority=0
priority = 1

#netacad email cth: 'abcd@gmail.com'
email='prasastiasaliha@gmail.com'
import random
import math
# copy-paste semua #Graded cells YANG SUDAH ANDA KERJAKAN di bawah ini

def isPointInCircle(x,y,r,center=(0,0)):
 x0 = center[0]
 y0 = center[1]
 pers = (x-x0)**2 + (y-y0)**2
 diameter = r**2
 
 if pers <= diameter :
  return True

 elif pers > diameter :
   return False

 elif pers == diameter :
   return True

def generateRandomSquarePoints(n,length,center=(0,0)):
  # MULAI KODEMU DI SINI
  maxx = center[0]+length/2
  maxy = center[1]+length/2
  minx = center[0]-length/2
  miny = center[1]-length/2
  
  # Gunakan list comprehensi on dengan variable minx, miny, length, dan n
  points = [[random.uniform(minx,maxx),random.uniform(miny,maxy)] for i in range(n)]
  
  return points

def MCCircleArea(r,n=100,center=(0,0)):
  # MULAI KODEMU DI SINI
  sisi = 2*r
  n_dalam = 0
  for x,y in generateRandomSquarePoints(n, sisi):
    if(isPointInCircle(x,y,r)) == True :
      n_dalam+=1
  luas_lingkaran = (n_dalam/n)*(sisi ** 2)
  return luas_lingkaran

def LLNPiMC(nsim,nsample):
  arr=[]
  for i in range(nsim):
      pi = MCCircleArea(1,nsample)
      arr.append(pi)
  total = sum(arr)
  mean = total/nsim
  return mean

def relativeError(act,est):
    error = abs((est-act)/act)*100
    hasil = round(error,6)
    return hasil